image: alpine:latest

variables:
  # CInkstone
  SERVICE:            cinkstone-proto

stages:
  - test
  - staging
  - deploy

# TEST-----------------------------------------------------------------------

### ESSENTIALÂ DEPENDENCIES
.essential:
  before_script:
    - apt-get update && apt-get install -y build-essential unzip
    # Install NPM
    - curl -sL https://deb.nodesource.com/setup_10.x | bash -
    - apt-get install -y nodejs

### CODE QUALITY
code_quality:
  extends:       .essential
  stage:         test
  allow_failure: true
  image:
    name: golang:1.11.1
  script:
    # LINT
    - make install
    - make lint 2>&1 | tee lint.log
  artifacts:
    name: "$CI_JOB_STAGE-$CI_JOB_NAME-$CI_COMMIT_SHA"
    paths:
      - lint.log
    when: on_failure
  only:
    - branches
    - tags
  except:
    variables:
      - $CODE_QUALITY_DISABLED

### PROTOLOCK
protolock:
  extends:       .essential
  stage:         test
  allow_failure: true
  image:
    name: golang:1.11.1
  script:
    # PROTOLOCK
    - make install
    - make lock 2>&1 | tee lock.log
  artifacts:
    name: "$CI_JOB_STAGE-$CI_JOB_NAME-$CI_COMMIT_SHA"
    paths:
      - lock.log
    when: on_failure
  only:
    - branches
    - tags
  except:
    variables:
      - $CODE_QUALITY_DISABLED

### GITLAB PAGES
pages:
  extends:       .essential
  stage:         staging
  allow_failure: false
  image:
    name: golang:1.11.1
  script:
    # DOC
    - make install
    - make doc
    - mkdir -p docs
    - cp -Rfp docs/. public
    - cp -fp public/proto.html public/index.html
  artifacts:
    name: "$CI_JOB_STAGE-$CI_JOB_NAME-$CI_COMMIT_SHA"
    paths:
      - public
      - docs
    when: on_success
  only:
    - branches
    - tags
  except:
    variables:
      - $GITLAB_PAGES_DISABLED
      - $DEPLOYMENT_DISABLED

### PROTO CODE GENERATION
.proto:
  extends:       .essential
  stage:         deploy
  allow_failure: false
  image:
    name:        golang:1.11.1
  dependencies:
    - pages
  script:
    ## Clone and update repository
    - git clone --branch master --single-branch https://${CINK_JOB_USER}:${CINK_JOB_TOKEN}@gitlab.com/CInkstone/cinkstone-proto/${LANG}.git ${LANG}
    # Install dependencies
    - make install
    ## Generate proto code
    - make -B ${LANG}
    ## Save the output
    - mkdir -p temp
    - cp -fp /tmp/tag temp/tag
    - cp -fp /tmp/message temp/message
    ## Copy all into out folder
    - cp -Rfp docs/. out/docs
    - cp -Rfp out/. ${COPY_PATH}
  except:
    variables:
      - $DEPLOYMENT_DISABLED

### PUBLISH JS CODE
js:
  extends:      .proto
  variables:
    LANG:       "js"
    COPY_PATH:  "js"
  after_script:
    ## Read output
    - read TAG <temp/tag
    - read MESSAGE <temp/message
    # Set package version from temp file (created by "make js")
    - cd ${LANG}
    - npm version ${TAG} --force --allow-same-version --no-git-tag-version
    ## Commit & tag its new version
    - git add .
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git commit -m "${MESSAGE}"
    - git tag -a "${TAG}" -m "${MESSAGE}"
    ## Push the repo
    - git push --tags origin HEAD
  only:
    - tags

### PUBLISH GO CODE
go:
  extends:      .proto
  variables:
    LANG:       "go"
    COPY_PATH:  "go"
  after_script:
    ## Read output
    - read TAG <temp/tag
    - read MESSAGE <temp/message
    ## Commit & tag its new version
    - cd ${LANG}
    - git add .
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git commit -m "${MESSAGE}"
    - git tag -a "${TAG}" -m "${MESSAGE}"
    ## Push the repo
    - git push --tags origin HEAD
  only:
    - tags

### PUBLISH JAVA LITE (ANDROID) CODE
java-lite:
  extends:      .proto
  variables:
    LANG:       "java-lite"
    COPY_PATH:  "java-lite/src/main/proto"
  after_script:
    ## Read output
    - read TAG <temp/tag
    - read MESSAGE <temp/message
    ## Commit & tag its new version
    - cd ${LANG}
    - git add .
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git commit -m "${MESSAGE}"
    - git tag -a "${TAG}" -m "${MESSAGE}"
    ## Push the repo
    - git push --tags origin HEAD
  only:
    - tags

### PUBLISH JAVA CODE
java:
  extends:      .proto
  variables:
    LANG:       "java"
    COPY_PATH:  "java/src/main/proto"
  after_script:
    ## Read output
    - read TAG <temp/tag
    - read MESSAGE <temp/message
    ## Commit & tag its new version
    - cd ${LANG}
    - git add .
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git commit -m "${MESSAGE}"
    - git tag -a "${TAG}" -m "${MESSAGE}"
    ## Push the repo
    - git push --tags origin HEAD
  only:
    - tags